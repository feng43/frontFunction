(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["ssf_ff"] = factory();
	else
		root["ssf_ff"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

/**
	* @desc webpack打包入口文件
*/
var randomColor = __webpack_require__(1);
var getBeforeDate = __webpack_require__(2);
var formatPassTime = __webpack_require__(3);
var formatRemainTime = __webpack_require__(4);
var timeTransfer = __webpack_require__(5);
var dayTransfer = __webpack_require__(6);
var isEmail = __webpack_require__(7);
var isMobile = __webpack_require__(8);
var isPwdComplex = __webpack_require__(9);
var isIdCard = __webpack_require__(10);
var getQueryString = __webpack_require__(11);
var parseQueryString = __webpack_require__(12);
var stringfyQueryString = __webpack_require__(13);
var scroll = __webpack_require__(14);

module.exports = {
	randomColor: randomColor,
	getBeforeDate: getBeforeDate,
	formatPassTime: formatPassTime,
	formatRemainTime: formatRemainTime,
	timeTransfer: timeTransfer,
	dayTransfer: dayTransfer,
	isEmail: isEmail,
	isMobile: isMobile,
	isPwdComplex: isPwdComplex,
	isIdCard: isIdCard,
	getQueryString: getQueryString,
	parseQueryString: parseQueryString,
	stringfyQueryString: stringfyQueryString,
	scroll: scroll
};

/***/ }),
/* 1 */
/***/ (function(module, exports) {

/**
 *
 * @desc 随机生成颜色
 * @return {String}
 */
function randomColor() {
  return '#' + ('00000' + (Math.random() * 0x1000000 << 0).toString(16)).slice(-6);
};

module.exports = randomColor;

/***/ }),
/* 2 */
/***/ (function(module, exports) {

/**
 *
 * @desc 获取几天前日期,n为数字,返回距离今天n天前的日期
 * @param  {Number}  n
 * @return {String}
 */
function getBeforeDate(n) {
	var n = n;
	var d = new Date();
	var year = d.getFullYear();
	var mon = d.getMonth() + 1;
	var day = d.getDate();
	if (day <= n) {
		if (mon > 1) {
			mon = mon - 1;
		} else {
			year = year - 1;
			mon = 12;
		}
	}
	d.setDate(d.getDate() - n);
	year = d.getFullYear();
	mon = d.getMonth() + 1;
	day = d.getDate();
	s = year + "-" + (mon < 10 ? "0" + mon : mon) + "-" + (day < 10 ? "0" + day : day);
	return s;
};
module.exports = getBeforeDate;

/***/ }),
/* 3 */
/***/ (function(module, exports) {

/**
 *
 * @desc   格式化${startTime}距现在的已过时间
 * @param  {Date} startTime
 * @return {String}
 */
function formatPassTime(startTime) {
    var currentTime = Date.parse(new Date()),
        time = currentTime - startTime,
        day = parseInt(time / (1000 * 60 * 60 * 24)),
        hour = parseInt(time / (1000 * 60 * 60)),
        min = parseInt(time / (1000 * 60)),
        month = parseInt(day / 30),
        year = parseInt(month / 12);
    if (year) return year + "年前";
    if (month) return month + "个月前";
    if (day) return day + "天前";
    if (hour) return hour + "小时前";
    if (min) return min + "分钟前";else return '刚刚';
}

module.exports = formatPassTime;

/***/ }),
/* 4 */
/***/ (function(module, exports) {

/**
 *
 * @desc   格式化现在距${endTime}的剩余时间
 * @param  {Date} endTime
 * @return {String}
 */
function formatRemainTime(endTime) {
    var startDate = new Date(); //开始时间
    var endDate = new Date(endTime); //结束时间
    var t = endDate.getTime() - startDate.getTime(); //时间差
    var d = 0,
        h = 0,
        m = 0,
        s = 0;
    if (t >= 0) {
        d = Math.floor(t / 1000 / 3600 / 24);
        h = Math.floor(t / 1000 / 60 / 60 % 24);
        m = Math.floor(t / 1000 / 60 % 60);
        s = Math.floor(t / 1000 % 60);
    };
    return d + "天 " + h + "小时 " + m + "分钟 " + s + "秒";
};

module.exports = formatRemainTime;

/***/ }),
/* 5 */
/***/ (function(module, exports) {

/**
 *
 * @desc 格式化日期到年月日
 * @param  {String} time
 * @return {String}
 */
function timeTransfer(time) {
    if (time) {
        var datetime = new Date(time);
        var year = datetime.getFullYear();
        var month = datetime.getMonth() + 1;
        var date = datetime.getDate();

        //个位数补0
        if (month < 10) {
            month = "0" + month;
        };
        if (date < 10) {
            date = "0" + date;
        };
        var result = year + "-" + month + "-" + date;
        return result;
    }
};
module.exports = timeTransfer;

/***/ }),
/* 6 */
/***/ (function(module, exports) {

/**
 *
 * @desc 格式化日期到年月日时分秒
 * @param  {String} time
 * @return {String}
 */
function dayTransfer(obj) {
	if (obj) {
		var datetime = new Date(obj);
		var year = datetime.getFullYear();
		var month = datetime.getMonth() + 1;
		var date = datetime.getDate();
		var hour = datetime.getHours();
		var min = datetime.getMinutes();
		var sec = datetime.getSeconds();

		//个位数补0
		if (month < 10) {
			month = "0" + month;
		};
		if (date < 10) {
			date = "0" + date;
		};
		if (hour < 10) {
			hour = "0" + hour;
		};
		if (min < 10) {
			min = "0" + min;
		};
		if (sec < 10) {
			sec = "0" + sec;
		};

		var result = year + "-" + month + "-" + date + " " + hour + ":" + min + ":" + sec;

		return result;
	};
};
module.exports = dayTransfer;

/***/ }),
/* 7 */
/***/ (function(module, exports) {

/**
 * @desc   判断是否为邮箱地址
 * @param  {String}  str
 * @return {Boolean}
 */
function isEmail(str) {
  return (/[\w!#$%&'*+/=?^_`{|}~-]+(?:\.[\w!#$%&'*+/=?^_`{|}~-]+)*@(?:[\w](?:[\w-]*[\w])?\.)+[\w](?:[\w-]*[\w])?/.test(str)
  );
}

module.exports = isEmail;

/***/ }),
/* 8 */
/***/ (function(module, exports) {

/**
 * @desc   判断是否为手机号,国内 13、15、18开头
 * @param  {String}  str
 * @return {Boolean}
 */
function isMobile(str) {
  return (/^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d{8}$/.test(str)
  );
}

module.exports = isMobile;

/***/ }),
/* 9 */
/***/ (function(module, exports) {

/**
 * @desc   密码强度必需包含大小写,字母与数字,长度在8-10位
 * @param  {String}  str
 * @return {Boolean}
 */
function isPwdComplex(str) {
  return (/^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$/.test(str)
  );
}

module.exports = isPwdComplex;

/***/ }),
/* 10 */
/***/ (function(module, exports) {

/**
 * @desc   判断身份证，可传入身份证位数，只限15与18
 * @param  {String}  str
 * @param  {Number}  n   default: 18
 * @return {Boolean}
 */
function isIdCard(str, n) {
  if (n && n === 15) {
    return (/^[1-9]\d{7}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d{3}$/.test(str)
    );
  } else {
    return (/^[1-9]\d{5}[1-9]\d{3}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d{3}([0-9]|X)$/.test(str)
    );
  };
};

module.exports = isIdCard;

/***/ }),
/* 11 */
/***/ (function(module, exports) {

/**
 *
 * @desc 根据name获取url中参数
 * @param  {String} name
 * @return {String}
 */
function getQueryString(name) {
	var reg = new RegExp("(^|&)" + name + "=([^&]*)(&|$)", "i");
	var r = window.location.search.substr(1).match(reg);
	if (r != null) {
		return r[2];
	} else {
		return null;
	};
};
module.exports = getQueryString;

/***/ }),
/* 12 */
/***/ (function(module, exports) {

/**
 *
 * @desc   url参数转对象
 * @param  {String} url  default: window.location.href
 * @return {Object}
 */
function parseQueryString(url) {
    url = url == null ? window.location.href : url;
    var search = url.substring(url.lastIndexOf('?') + 1);
    if (!search) {
        return {};
    }
    return JSON.parse('{"' + decodeURIComponent(search).replace(/"/g, '\\"').replace(/&/g, '","').replace(/=/g, '":"') + '"}');
}

module.exports = parseQueryString;

/***/ }),
/* 13 */
/***/ (function(module, exports) {

/**
 *
 * @desc   此方法只能转义深度为1的json数据，多层json，将不能正确解析，请慎用
 * @param  {Object} obj
 * @return {String}
 */
/*function stringfyQueryString(obj) {
    if (!obj) return '';
    var pairs = [];

    for (var key in obj) {
        var value = obj[key];

        if (value instanceof Array) {
            for (var i = 0; i < value.length; ++i) {
                pairs.push(encodeURIComponent(key + '[' + i + ']') + '=' + encodeURIComponent(value[i]));
            }
            continue;
        }

        pairs.push(encodeURIComponent(key) + '=' + encodeURIComponent(obj[key]));
    }

    return pairs.join('&');
}*/
function stringfyQueryString(obj) {

    var pairs = [];
    for (var p in obj) {
        pairs.push(encodeURIComponent(p) + "=" + encodeURIComponent(obj[p]));
    }
    return pairs.join("&");
};

module.exports = stringfyQueryString;

/***/ }),
/* 14 */
/***/ (function(module, exports) {

/**
 * @desc   目标到目标页面缓动
 * @param  {Number}  B 目标位置  default: 页面顶部
 * @param  {Number}  rate 缓动速率  default: 4
 * @param  {Function}  callback 回调函数，支持两个参数
                        value和isEnding，表示当前的位置值（Number）以及是否动画结束（Boolean）
 */
function scroll(B, rate) {
    var doc = document.body.scrollTop ? document.body : document.documentElement;
    var A = doc.scrollTop;
    if (A == B || typeof A != 'number') {
        return;
    };
    B = B || 0;
    rate = rate || 4;
    var step = function step() {
        A = A + (B - A) / rate;

        /*if ( A < 1 && callback) {
            callback(B, true);
            return;
        };
        if( callback ) callback(A, false);*/

        // 临界判断，终止动画
        if (A < 1) {
            doc.scrollTop = 0;
            return;
        }
        doc.scrollTop = A;
        requestAnimationFrame(step);
    };
    step();
};
module.exports = scroll;

/***/ })
/******/ ]);
});